import os
import requests
from typing import Dict, Any, List
import google.generativeai as genai
from dotenv import load_dotenv

load_dotenv()

class ChatProcessor:
    def __init__(self):
        # ES config
        self.es_url = "http://localhost:9200/knowledge/_search"
        
        # Gemini config
        api_key = os.getenv("GEMINI_API_KEY") or os.getenv("GOOGLE_API_KEY")
        if not api_key:
            raise RuntimeError("Missing GEMINI_API_KEY/GOOGLE_API_KEY in environment")
        
        genai.configure(api_key=api_key)
        self.model = genai.GenerativeModel("models/gemini-2.0-flash-exp")
        
        # System prompt for medical chatbot
        self.system_prompt = """B·∫°n l√† tr·ª£ l√Ω y khoa AI chuy√™n nghi·ªáp v·ªõi c√°c nguy√™n t·∫Øc sau:

üîç **PH√ÇN T√çCH TRI·ªÜU CH·ª®NG:**
- ƒê·∫∑t c√¢u h·ªèi chi ti·∫øt ƒë·ªÉ hi·ªÉu r√µ tri·ªáu ch·ª©ng
- H·ªèi v·ªÅ th·ªùi gian xu·∫•t hi·ªán, m·ª©c ƒë·ªô nghi√™m tr·ªçng, y·∫øu t·ªë k√≠ch th√≠ch
- Thu th·∫≠p th√¥ng tin v·ªÅ ti·ªÅn s·ª≠ b·ªánh, thu·ªëc ƒëang d√πng

üí° **T∆Ø V·∫§N Y KHOA:**
- ƒê∆∞a ra gi·∫£i th√≠ch d·ªÖ hi·ªÉu v·ªÅ c√°c t√¨nh tr·∫°ng c√≥ th·ªÉ x·∫£y ra
- ƒê·ªÅ xu·∫•t c√°c bi·ªán ph√°p chƒÉm s√≥c ban ƒë·∫ßu an to√†n
- Ph√¢n lo·∫°i m·ª©c ƒë·ªô c·∫•p thi·∫øt: t·ª± chƒÉm s√≥c / kh√°m b√°c sƒ© / c·∫•p c·ª©u

‚ö†Ô∏è **AN TO√ÄN & GI·ªöI H·∫†N:**
- LU√îN nh·∫•n m·∫°nh: "Th√¥ng tin ch·ªâ mang t√≠nh tham kh·∫£o, kh√¥ng thay th·∫ø b√°c sƒ©"
- Khuy·∫øn ngh·ªã g·∫∑p b√°c sƒ© n·∫øu tri·ªáu ch·ª©ng nghi√™m tr·ªçng ho·∫∑c k√©o d√†i
- KH√îNG ch·∫©n ƒëo√°n ch√≠nh th·ª©c hay k√™ toa thu·ªëc

üìù **PHONG C√ÅCH GIAO TI·∫æP:**
- Th√¢n thi·ªán, d·ªÖ hi·ªÉu, kh√¥ng g√¢y lo l·∫Øng
- S·ª≠ d·ª•ng bullet points cho th√¥ng tin r√µ r√†ng
- H·ªèi th√™m th√¥ng tin khi c·∫ßn thi·∫øt

H√£y ph√¢n t√≠ch cu·ªôc h·ªôi tho·∫°i v√† ƒë∆∞a ra ph·∫£n h·ªìi ph√π h·ª£p."""

    async def process_chat_message(self, user_message: str, chat_history: List[str], session_id: str) -> Dict[str, Any]:
        """Process chat message with context from previous messages"""
        
        # Build conversation context
        conversation_context = self._build_conversation_context(chat_history, user_message)
        
        # Extract symptoms/keywords for medical search
        symptoms_keywords = await self._extract_medical_keywords(user_message, chat_history)
        
        # Search medical knowledge if symptoms detected
        medical_context = ""
        snippets = []
        if symptoms_keywords:
            try:
                snippets, _ = self._search_elasticsearch(symptoms_keywords, topk=5)
                medical_context = "\n".join(snippets[:3])
            except Exception as e:
                print(f"ES search failed: {e}")
        
        # Generate contextual response
        ai_response = await self._generate_chat_response(
            conversation_context, 
            user_message, 
            medical_context
        )
        
        # Analyze conversation for diagnosis context
        diagnosis_context = await self._analyze_conversation_context(chat_history + [f"user: {user_message}"])
        
        return {
            "response": ai_response,
            "diagnosis_context": diagnosis_context,
            "medical_snippets": snippets[:2],
            "symptoms_detected": symptoms_keywords
        }

    def _build_conversation_context(self, chat_history: List[str], current_message: str) -> str:
        """Build conversation context from chat history"""
        if not chat_history:
            return f"Ng∆∞·ªùi d√πng: {current_message}"
        
        # Take last 10 messages for context
        recent_history = chat_history[-10:] if len(chat_history) > 10 else chat_history
        
        context = "L·ªäCH S·ª¨ H·ªòI THO·∫†I:\n"
        for message in recent_history:
            if message.startswith("user:"):
                context += f"Ng∆∞·ªùi d√πng: {message[5:].strip()}\n"
            elif message.startswith("assistant:"):
                context += f"AI: {message[10:].strip()}\n"
        
        context += f"\nTIN NH·∫ÆN HI·ªÜN T·∫†I:\nNg∆∞·ªùi d√πng: {current_message}"
        return context

    async def _extract_medical_keywords(self, message: str, chat_history: List[str]) -> str:
        """Extract medical keywords for ES search"""
        try:
            # Use recent conversation for context
            recent_messages = chat_history[-5:] if len(chat_history) > 5 else chat_history
            context_text = " ".join(recent_messages) + " " + message
            
            prompt = f"""T·ª´ cu·ªôc h·ªôi tho·∫°i y khoa n√†y, tr√≠ch xu·∫•t c√°c t·ª´ kh√≥a tri·ªáu ch·ª©ng/b·ªánh l√Ω b·∫±ng ti·∫øng Anh ƒë·ªÉ t√¨m ki·∫øm th√¥ng tin y khoa.
CH·ªà tr·∫£ v·ªÅ t·ª´ kh√≥a ti·∫øng Anh, c√°ch nhau b·∫±ng d·∫•u c√°ch, KH√îNG gi·∫£i th√≠ch g√¨ th√™m.
V√≠ d·ª•: "headache fever nausea" ho·∫∑c "hypertension chest pain"

H·ªôi tho·∫°i: {context_text}

T·ª´ kh√≥a:"""

            response = self.model.generate_content(prompt)
            keywords = response.text.strip()
            
            # Filter out non-medical terms
            if len(keywords.split()) <= 10 and any(word in keywords.lower() for word in ['pain', 'fever', 'headache', 'symptom', 'disease', 'treatment']):
                return keywords
            return ""
            
        except Exception as e:
            print(f"Keyword extraction failed: {e}")
            return ""

    def _search_elasticsearch(self, query: str, topk: int = 5):
        """Search medical knowledge in Elasticsearch"""
        try:
            payload = {
                "query": {
                    "bool": {
                        "should": [
                            {"match": {"body": {"query": query, "boost": 2}}},
                            {"match_phrase": {"body": query}},
                            {"fuzzy": {"body": query}}
                        ]
                    }
                },
                "size": topk
            }
            
            response = requests.post(self.es_url, json=payload, timeout=10)
            response.raise_for_status()
            
            hits = response.json().get("hits", {}).get("hits", [])
            snippets = [hit["_source"]["body"] for hit in hits]
            
            return snippets, hits
        except Exception as e:
            print(f"Elasticsearch search failed: {e}")
            return [], []

    async def _generate_chat_response(self, conversation_context: str, current_message: str, medical_context: str) -> str:
        """Generate AI response with conversation context"""
        try:
            prompt = f"""{self.system_prompt}

{conversation_context}

"""
            if medical_context:
                prompt += f"""
TH√îNG TIN Y KHOA LI√äN QUAN:
{medical_context}

"""
            prompt += """
H√£y ph√¢n t√≠ch cu·ªôc h·ªôi tho·∫°i v√† tr·∫£ l·ªùi tin nh·∫Øn m·ªõi nh·∫•t c·ªßa ng∆∞·ªùi d√πng. 
S·ª≠ d·ª•ng th√¥ng tin t·ª´ l·ªãch s·ª≠ h·ªôi tho·∫°i ƒë·ªÉ ƒë∆∞a ra c√¢u tr·∫£ l·ªùi ph√π h·ª£p v√† c√≥ t√≠nh li√™n t·ª•c.
"""

            response = self.model.generate_content(prompt)
            return response.text.strip()
            
        except Exception as e:
            print(f"Chat response generation failed: {e}")
            return """Xin l·ªói, t√¥i g·∫∑p v·∫•n ƒë·ªÅ k·ªπ thu·∫≠t. 

N·∫øu b·∫°n c√≥ tri·ªáu ch·ª©ng c·∫ßn t∆∞ v·∫•n g·∫•p:
‚Ä¢ Tri·ªáu ch·ª©ng nh·∫π: th·ª≠ l·∫°i sau v√†i ph√∫t
‚Ä¢ Tri·ªáu ch·ª©ng nghi√™m tr·ªçng: li√™n h·ªá b√°c sƒ© ho·∫∑c c∆° s·ªü y t·∫ø
‚Ä¢ Tr∆∞·ªùng h·ª£p kh·∫©n c·∫•p: g·ªçi 115 ho·∫∑c ƒë·∫øn c·∫•p c·ª©u ngay

**L∆∞u √Ω:** H·ªá th·ªëng AI ch·ªâ h·ªó tr·ª£ t∆∞ v·∫•n, kh√¥ng thay th·∫ø vi·ªác kh√°m b√°c sƒ©."""

    async def _analyze_conversation_context(self, full_history: List[str]) -> Dict[str, Any]:
        """Analyze conversation to extract diagnosis context"""
        try:
            all_text = " ".join(full_history)
            
            prompt = f"""Ph√¢n t√≠ch cu·ªôc h·ªôi tho·∫°i y khoa n√†y v√† tr√≠ch xu·∫•t th√¥ng tin c·∫•u tr√∫c:

H·ªôi tho·∫°i: {all_text}

Tr·∫£ v·ªÅ JSON format:
{{
  "symptoms_mentioned": ["tri·ªáu ch·ª©ng 1", "tri·ªáu ch·ª©ng 2"],
  "duration": "th·ªùi gian xu·∫•t hi·ªán tri·ªáu ch·ª©ng",
  "severity": "m·ª©c ƒë·ªô (nh·∫π/v·ª´a/n·∫∑ng)",
  "key_concerns": ["m·ªëi quan t√¢m ch√≠nh"],
  "recommendation_level": "self_care/see_doctor/emergency"
}}
"""

            response = self.model.generate_content(prompt)
            try:
                import json
                return json.loads(response.text.strip())
            except:
                return {
                    "symptoms_mentioned": [],
                    "duration": "unknown",
                    "severity": "unknown", 
                    "key_concerns": [],
                    "recommendation_level": "see_doctor"
                }
                
        except Exception as e:
            print(f"Conversation analysis failed: {e}")
            return {
                "symptoms_mentioned": [],
                "duration": "unknown",
                "severity": "unknown",
                "key_concerns": [],
                "recommendation_level": "see_doctor"
            }